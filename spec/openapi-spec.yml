openapi: 3.0.3
info:
  title: Regular Income
  description: This is the API for Regular Income
  version: 1.0.0
tags:
  - name: UserAuth
    description: Everything about Users and Authentication
  - name: Category
    description: Everything about Categories
  - name: Turnovers
    description: Everything about Turnovers
  - name: TurnoverImports
    description: Everything about TurnoverImports
  - name: Reports
    description: Everything about Reports

paths:
  /api/user/register:
    post:
      tags:
        - UserAuth
      summary: Register new user
      description: Register new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /api/user/{id}/details:
    patch:
      tags:
        - UserAuth
      summary: Updates an user
      description: Updates an  user
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /api/user/{id}:
    delete:
      tags:
        - UserAuth
      summary: Deletes an user
      description: Deletes an  user
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        204:
          description: Successful Operation
  /api/auth/login:
    get:
      tags:
        - UserAuth
      summary: Gets login infos of an user
      description: Gets login infos of an user
      operationId: loginUserInfo
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      tags:
        - UserAuth
      summary: Login an user
      description: Login an user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /api/auth/logout:
    delete:
      tags:
        - UserAuth
      summary: Logout an user
      description: Logout an user
      operationId: logoutUser
      responses:
        204:
          description: Successful Operation

  /api/categories:
    get:
      tags:
        - Category
      summary: Gets all categories flatted
      description: Gets all categories flatted
      operationId: getFlatCategories
      parameters:
        - in: query
          name: deep
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      tags:
        - Category
      summary: Creates a new category
      description: Creates a new category
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryPatch"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
  /api/categories/tree:
    get:
      tags:
        - Category
      summary: Gets all categories as tree
      description: Gets all categories as tree
      operationId: getCategoriesAsTree
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
  /api/categories/{id}:
    patch:
      tags:
        - Category
      summary: Updates a category
      description: Updates a category
      operationId: updateCategory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryPatch"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
    delete:
      tags:
        - Category
      summary: Deletes a category
      description: Deletes a category
      operationId: deleteCategory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        204:
          description: Successful operation
  /api/categories/{parent-id}/children:
    post:
      tags:
        - Category
      summary: Creates a new category as child
      description: Creates a new category as child
      operationId: createCategoryAsChild
      parameters:
        - in: path
          name: parent-id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryPatch"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
  /api/categories/{parent-id}/children/{child-id}:
    patch:
      tags:
        - Category
      summary: Moves a category to another category as child
      description: Moves a category to another category as child
      operationId: reallocateCategory
      parameters:
        - in: path
          name: parent-id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - in: path
          name: child-id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"

  /api/turnover-import/formats:
    get:
      tags:
        - Turnovers
      summary: Get supported formats
      operationId: getSupportedFormats
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TurnoverImportFormat"
  /api/turnover-import/preview/csv:
    post:
      tags:
        - Turnovers
      deprecated: true
      summary: previews a CSV file to a import preview
      operationId: processCsvPreview
      parameters:
        - in: query
          name: encoding
          required: false
          schema:
            type: string
            default: UTF-8
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: text/csv
                headers:
                  Content-Type:
                    schema:
                      type: string
                      enum: [ text/csv ]
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RawCsvTable"
  /api/turnover-import/preview:
    post:
      tags:
        - Turnovers
      deprecated: true
      summary: Processes a preview to a turnover import
      operationId: processPreview
      parameters:
        - in: query
          name: format
          required: true
          schema:
            $ref: "#/components/schemas/TurnoverImportFormat"
        - in: query
          name: encoding
          required: false
          schema:
            type: string
            default: UTF-8
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: text/csv
                headers:
                  Content-Type:
                    schema:
                      type: string
                      enum: [ text/csv ]
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TurnoverPreview"
  /api/turnover-import:
    post:
      tags:
        - Turnovers
      summary: Creates a new turnover import
      operationId: createTurnoverImport
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                data:
                  $ref: "#/components/schemas/TurnoverImportPatch"
            encoding:
              file:
                contentType: text/csv
                headers:
                  Content-Type:
                    schema:
                      type: string
                      enum: [ text/csv ]

      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TurnoverImport"
    get:
      tags:
        - Turnovers
      summary: Get all turnover imports
      operationId: fetchTurnoverImports
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TurnoverImport"
  /api/turnover-import/{id}:
    get:
      tags:
        - Turnovers
      summary: Get a turnover import
      operationId: fetchTurnoverImport
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TurnoverImport"
    delete:
      tags:
        - Turnovers
      summary: Deletes a turnover import
      operationId: deleteTurnoverImport
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        204:
          description: Successful operation
    patch:
      tags:
        - Turnovers
      summary: Updates the rows of a turnover import
      operationId: patchTurnoverImport
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TurnoverImportRowsPatch"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TurnoverImport"
  /api/turnover-import/rows:
    patch:
      tags:
        - Turnovers
      summary: Batch Patch Turnover Imports
      operationId: batchPatchTurnoverImports
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TurnoverImportRowsPatch"
      responses:
        204:
          description: Successful operation

  /api/turnover-import/category/{category-id}:
    get:
      tags:
        - Turnovers
      summary: Get turnovers for a given category
      operationId: fetchTurnoversForCategory
      parameters:
        - in: path
          name: category-id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TurnoverRow"
  /api/turnover-import/category/{category-id}/report/{date-grouping}:
    get:
      tags:
        - Turnovers
      summary: Get turnovers report for a given category
      operationId: fetchTurnoversReportForCategory
      parameters:
        - in: path
          name: category-id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - in: path
          name: date-grouping
          required: true
          schema:
            type: string
        - in: query
          name: recursion-level
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryTurnoverReport"

  /api/reports/info:
    get:
      tags:
        - Reports
      summary: Get basic coarse infos
      description: Get basic coarse infos
      operationId: fetchCoarseInfos
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicCoarseInfo"
  /api/reports/balance-progression:
    get:
      tags:
        - Reports
      summary: Get balance progression report
      description: Get balance progression report
      operationId: fetchBalanceProgressionReport
      parameters:
        - in: query
          name: begin
          required: false
          schema:
            $ref: "#/components/schemas/Date"
        - in: query
          name: end
          required: false
          schema:
            $ref: "#/components/schemas/Date"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BalanceProgressionReport"
  /api/reports/monthly-income-expenses:
    get:
      tags:
        - Reports
      summary: Get monthly income expense report
      description: Get monthly income expense report
      operationId: fetchMonthlyIncomeExpenseReport
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonthlyIncomeExpenseReport"
  /api/reports/income-expenses-flow:
    get:
      tags:
        - Reports
      summary: Get income expense flow report
      description: Get income expense flow report
      operationId: fetchIncomeExpenseFlowReport
      parameters:
        - in: query
          name: year
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: month
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeExpenseFlowReport"
  /api/reports/income-expenses-flow/sliding-window/{unit}/{count}:
    get:
      tags:
        - Reports
      summary: Get income expense flow sliding window report
      description: Get income expense flow sliding window report
      operationId: fetchIncomeExpenseFlowSlidingWindowReport
      parameters:
        - in: path
          name: unit
          required: true
          schema:
            $ref: "#/components/schemas/ReportTimeUnits"
        - in: path
          name: count
          required: true
          schema:
            type: integer
            format: int32
        - in: query
          name: reference-date
          required: false
          schema:
            $ref: "#/components/schemas/Date"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeExpenseFlowReport"

components:
  schemas:
    CreatedMetaInformation:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
    UpdatedMetaInformation:
      type: object
      allOf:
        - $ref: "#/components/schemas/CreatedMetaInformation"
        - properties:
            updatedAt:
              $ref: "#/components/schemas/Timestamp"
    PatchInformation:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
    User:
      type: object
      required:
        - id
        - username
      properties:
        id:
          $ref: "#/components/schemas/ID"
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    UserRegistration:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
        firstname:
          type: string
        lastname:
          type: string
    CategoryBudget:
      type: object
      required:
        - budgetInCents
      properties:
        budgetInCents:
          $ref: "#/components/schemas/MoneyValue"
        exceedingThreshold:
          type: number
          format: double
    CategoryPatch:
      type: object
      required:
        - name
      allOf:
        - $ref: "#/components/schemas/PatchInformation"
        - properties:
            name:
              type: string
            description:
              type: string
            budget:
              $ref: "#/components/schemas/CategoryBudget"
    Category:
      type: object
      required:
        - isNew
        - id
      allOf:
        - $ref: "#/components/schemas/UpdatedMetaInformation"
        - $ref: "#/components/schemas/CategoryPatch"
        - properties:
            isNew:
              type: boolean
            parentId:
              $ref: "#/components/schemas/ID"
            usageCount:
              type: integer
              format: int64
            subCategories:
              type: array
              items:
                $ref: "#/components/schemas/Category"
    CategoryTurnoverReport:
      type: object
      required:
        - categoryId
        - datapoints
      properties:
        categoryId:
          $ref: "#/components/schemas/ID"
        datapoints:
          type: array
          items:
            $ref: "#/components/schemas/CategoryTurnoverReportDatapoint"

    RawCsvTable:
      type: object
      required:
        - rows
        - columns
        - data
      properties:
        rows:
          type: integer
          format: int32
        columns:
          type: integer
          format: int32
        data:
          type: array
          items:
            type: array
            items:
              type: string

    TurnoverImport:
      type: object
      required:
        - id
        - importedAt
        - filename
        - filesizeBytes
        - format
        - encoding
        - turnovers
      properties:
        id:
          $ref: "#/components/schemas/ID"
        importedAt:
          $ref: "#/components/schemas/Timestamp"
        filename:
          type: string
        filesizeBytes:
          $ref: "#/components/schemas/Filesize"
        format:
          $ref: "#/components/schemas/TurnoverImportFormat"
        encoding:
          type: string
        firstTurnover:
          $ref: "#/components/schemas/Date"
        lastTurnover:
          $ref: "#/components/schemas/Date"
        turnovers:
          type: array
          items:
            $ref: "#/components/schemas/TurnoverRow"
    TurnoverImportPatch:
      type: object
      properties:
        format:
          $ref: "#/components/schemas/TurnoverImportFormat"
        encoding:
          type: string
        rows:
          type: array
          items:
            $ref: "#/components/schemas/TurnoverRow"
    TurnoverImportRowsPatch:
      type: object
      properties:
        rows:
          type: array
          items:
            $ref: "#/components/schemas/TurnoverRowPatch"
        deleteRowIds:
          type: array
          items:
            $ref: "#/components/schemas/ID"
    TurnoverRowPatch:
      type: object
      required:
        - id
        - categoryId
      properties:
        id:
          $ref: "#/components/schemas/ID"
        categoryId:
          $ref: "#/components/schemas/ID"
    TurnoverPreview:
      type: object
      deprecated: true
      required:
        - filename
        - format
        - encoding
        - uploadTime
        - rows
      properties:
        filename:
          type: string
        format:
          $ref: "#/components/schemas/TurnoverImportFormat"
        encoding:
          type: string
        uploadTime:
          $ref: "#/components/schemas/Timestamp"
        rows:
          type: array
          items:
            $ref: "#/components/schemas/TurnoverRowPreview"
    TurnoverRowPreview:
      type: object
      required:
        - importable
      allOf:
        - $ref: "#/components/schemas/TurnoverRow"
        - properties:
            importable:
              type: boolean
            suggestedCategories:
              type: array
              items:
                $ref: "#/components/schemas/CategorySuggestion"
    CategorySuggestion:
      type: object
      required:
        - categoryId
        - precedence
        - frequency
      properties:
        categoryId:
          $ref: "#/components/schemas/ID"
        precedence:
          type: number
          format: double
        frequency:
          type: integer
          format: int32
        origins:
          type: array
          items:
            type: string
    TurnoverRow:
      type: object
      required:
        - id
        - date
        - amountInCents
        - checksum
      properties:
        id:
          $ref: "#/components/schemas/ID"
        date:
          $ref: "#/components/schemas/Date"
        amountInCents:
          $ref: "#/components/schemas/MoneyValue"
        categoryId:
          $ref: "#/components/schemas/ID"
        checksum:
          type: string
        similarityChecksum:
          type: string
        description:
          type: string
        suggestedCategory:
          type: string
        recipient:
          type: string
    TurnoverImportFormat:
      type: string
      enum:
        - VR_BANK_CSV
        - DKB
        - NEW_DKB
        - PAYPAL

    CategoryTurnoverReportDatapoint:
      type: object
      required:
        - categoryId
        - date
      properties:
        categoryId:
          $ref: "#/components/schemas/ID"
        date:
          $ref: "#/components/schemas/Date"
        incomeAmountInCents:
          $ref: "#/components/schemas/MoneyValue"
        expenseAmountInCents:
          $ref: "#/components/schemas/MoneyValue"
        expenseBudgetInCents:
          $ref: "#/components/schemas/MoneyValue"
        expenseBudgetWarningThresholdInCents:
          $ref: "#/components/schemas/MoneyValue"
    BasicCoarseInfo:
      type: object
      required:
        - userId
        - maxDepthOfCategories
        - numberOfTransactions
        - numberOfUsedCategories
      properties:
        userId:
          $ref: "#/components/schemas/ID"
        earliestTransaction:
          $ref: "#/components/schemas/Date"
        latestTransaction:
          $ref: "#/components/schemas/Date"
        numberOfTransactions:
          type: integer
          format: int32
        numberOfUsedCategories:
          type: integer
          format: int32
        maxDepthOfCategories:
          type: integer
          format: int32
    BalanceProgressionReport:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BalanceDataPoint"
    BalanceDataPoint:
      type: object
      required:
        - date
        - index
        - balanceInCents
        - perDayBalanceInCents
      properties:
        index:
          type: integer
          format: int32
        date:
          $ref: "#/components/schemas/Date"
        perDayBalanceInCents:
          $ref: "#/components/schemas/MoneyValue"
        balanceInCents:
          $ref: "#/components/schemas/MoneyValue"
    IncomeExpenseFlowReport:
      type: object
      required:
        - start
        - end
        - flows
      properties:
        start:
          $ref: "#/components/schemas/Date"
        end:
          $ref: "#/components/schemas/Date"
        flows:
          type: array
          items:
            $ref: "#/components/schemas/FlowDataPoint"
    FlowDataPoint:
      type: object
      required:
        - amountInCents
        - depthLevel
        - fromCategory
        - toCategory
      properties:
        fromCategory:
          type: string
        toCategory:
          type: string
        depthLevel:
          type: integer
          format: int32
        amountInCents:
          $ref: "#/components/schemas/MoneyValue"
    MonthlyIncomeExpenseReport:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MonthlyIncomeExpenseDataPoint"
    MonthlyIncomeExpenseDataPoint:
      type: object
      required:
        - month
        - expenseInCents
        - incomeInCents
      properties:
        month:
          $ref: "#/components/schemas/Date"
        incomeInCents:
          $ref: "#/components/schemas/MoneyValue"
        expenseInCents:
          $ref: "#/components/schemas/MoneyValue"
    Problem:
      type: object
      properties:
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        path:
          type: string
        status:
          type: integer
          format: int32
        error:
          type: string
        errorDetails:
          type: string

    ReportTimeUnits:
      type: string
      enum:
        - DAYS
        - WEEKS
        - MONTHS
        - YEARS
        - DECADES
    ID:
      type: string
      format: uuid
    MoneyValue:
      type: integer
      format: int32
    Filesize:
      type: integer
      format: int64
    Date:
      type: string
      format: date
    Timestamp:
      type: string
      format: date-time
    Version:
      type: string
      format: uuid

#  responses:
#    SuccessOrderResponse:
#      description: Successful operation
#      headers:
#        ETag:
#          schema:
#            $ref: "#/components/schemas/Version"
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/Order'
#        application/xml:
#          schema:
#            $ref: '#/components/schemas/Order'
#    SuccessRestaurantResponse:
#      description: Successful operation
#      headers:
#        ETag:
#          schema:
#            $ref: "#/components/schemas/Version"
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/Restaurant'
#        application/xml:
#          schema:
#            $ref: '#/components/schemas/Restaurant'
#    ClientErrorResponse:
#      description: Operation failed due to client error
#      content:
#        application/json:
#          schema:
#            $ref: "#/components/schemas/ErrorObject"
#        application/xml:
#          schema:
#            $ref: "#/components/schemas/ErrorObject"
#    ServerErrorResponse:
#      description: Operation failed due to client error
#      content:
#        application/json:
#          schema:
#            $ref: "#/components/schemas/ErrorObject"
#        application/xml:
#          schema:
#            $ref: "#/components/schemas/ErrorObject"
