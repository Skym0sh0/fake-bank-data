/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income;


import generated.sky.regular.income.tables.BackupHistory;
import generated.sky.regular.income.tables.BankStatement;
import generated.sky.regular.income.tables.Category;
import generated.sky.regular.income.tables.FinancialTransaction;
import generated.sky.regular.income.tables.TurnoverFileImport;
import generated.sky.regular.income.tables.TurnoverRow;
import generated.sky.regular.income.tables.Users;
import generated.sky.regular.income.tables.records.BackupHistoryRecord;
import generated.sky.regular.income.tables.records.BankStatementRecord;
import generated.sky.regular.income.tables.records.CategoryRecord;
import generated.sky.regular.income.tables.records.FinancialTransactionRecord;
import generated.sky.regular.income.tables.records.TurnoverFileImportRecord;
import generated.sky.regular.income.tables.records.TurnoverRowRecord;
import generated.sky.regular.income.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * REGULAR_INCOME.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BackupHistoryRecord> BACKUP_HISTORY_PKEY = Internal.createUniqueKey(BackupHistory.BACKUP_HISTORY, DSL.name("backup_history_pkey"), new TableField[] { BackupHistory.BACKUP_HISTORY.ID }, true);
    public static final UniqueKey<BankStatementRecord> BANK_STATEMENT_PKEY = Internal.createUniqueKey(BankStatement.BANK_STATEMENT, DSL.name("bank_statement_pkey"), new TableField[] { BankStatement.BANK_STATEMENT.ID }, true);
    public static final UniqueKey<BankStatementRecord> BANK_STATEMENT_PREVIOUS_STATEMENT_ID_KEY = Internal.createUniqueKey(BankStatement.BANK_STATEMENT, DSL.name("bank_statement_previous_statement_id_key"), new TableField[] { BankStatement.BANK_STATEMENT.PREVIOUS_STATEMENT_ID }, true);
    public static final UniqueKey<CategoryRecord> CATEGORY_NAME_KEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_name_key"), new TableField[] { Category.CATEGORY.NAME }, true);
    public static final UniqueKey<CategoryRecord> CATEGORY_PKEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<FinancialTransactionRecord> FINANCIAL_TRANSACTION_PKEY = Internal.createUniqueKey(FinancialTransaction.FINANCIAL_TRANSACTION, DSL.name("financial_transaction_pkey"), new TableField[] { FinancialTransaction.FINANCIAL_TRANSACTION.ID }, true);
    public static final UniqueKey<TurnoverFileImportRecord> TURNOVER_FILE_IMPORT_PKEY = Internal.createUniqueKey(TurnoverFileImport.TURNOVER_FILE_IMPORT, DSL.name("turnover_file_import_pkey"), new TableField[] { TurnoverFileImport.TURNOVER_FILE_IMPORT.ID }, true);
    public static final UniqueKey<TurnoverRowRecord> TURNOVER_ROW_CHECKSUM_KEY = Internal.createUniqueKey(TurnoverRow.TURNOVER_ROW, DSL.name("turnover_row_checksum_key"), new TableField[] { TurnoverRow.TURNOVER_ROW.CHECKSUM }, true);
    public static final UniqueKey<TurnoverRowRecord> TURNOVER_ROW_PKEY = Internal.createUniqueKey(TurnoverRow.TURNOVER_ROW, DSL.name("turnover_row_pkey"), new TableField[] { TurnoverRow.TURNOVER_ROW.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_USERNAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_username_key"), new TableField[] { Users.USERS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BankStatementRecord, BankStatementRecord> BANK_STATEMENT__BANK_STATEMENT_PREVIOUS_STATEMENT_ID_FKEY = Internal.createForeignKey(BankStatement.BANK_STATEMENT, DSL.name("bank_statement_previous_statement_id_fkey"), new TableField[] { BankStatement.BANK_STATEMENT.PREVIOUS_STATEMENT_ID }, Keys.BANK_STATEMENT_PKEY, new TableField[] { BankStatement.BANK_STATEMENT.ID }, true);
    public static final ForeignKey<CategoryRecord, CategoryRecord> CATEGORY__CATEGORY_PARENT_CATEGORY_FKEY = Internal.createForeignKey(Category.CATEGORY, DSL.name("category_parent_category_fkey"), new TableField[] { Category.CATEGORY.PARENT_CATEGORY }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<FinancialTransactionRecord, BankStatementRecord> FINANCIAL_TRANSACTION__FINANCIAL_TRANSACTION_BANK_STATEMENT_ID_FKEY = Internal.createForeignKey(FinancialTransaction.FINANCIAL_TRANSACTION, DSL.name("financial_transaction_bank_statement_id_fkey"), new TableField[] { FinancialTransaction.FINANCIAL_TRANSACTION.BANK_STATEMENT_ID }, Keys.BANK_STATEMENT_PKEY, new TableField[] { BankStatement.BANK_STATEMENT.ID }, true);
    public static final ForeignKey<FinancialTransactionRecord, CategoryRecord> FINANCIAL_TRANSACTION__FINANCIAL_TRANSACTION_CATEGORY_ID_FKEY = Internal.createForeignKey(FinancialTransaction.FINANCIAL_TRANSACTION, DSL.name("financial_transaction_category_id_fkey"), new TableField[] { FinancialTransaction.FINANCIAL_TRANSACTION.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<TurnoverRowRecord, CategoryRecord> TURNOVER_ROW__TURNOVER_ROW_CATEGORY_ID_FKEY = Internal.createForeignKey(TurnoverRow.TURNOVER_ROW, DSL.name("turnover_row_category_id_fkey"), new TableField[] { TurnoverRow.TURNOVER_ROW.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<TurnoverRowRecord, TurnoverFileImportRecord> TURNOVER_ROW__TURNOVER_ROW_TURNOVER_FILE_FKEY = Internal.createForeignKey(TurnoverRow.TURNOVER_ROW, DSL.name("turnover_row_turnover_file_fkey"), new TableField[] { TurnoverRow.TURNOVER_ROW.TURNOVER_FILE }, Keys.TURNOVER_FILE_IMPORT_PKEY, new TableField[] { TurnoverFileImport.TURNOVER_FILE_IMPORT.ID }, true);
}
