/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables.records;


import generated.sky.regular.income.tables.BackupHistory;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BackupHistoryRecord extends UpdatableRecordImpl<BackupHistoryRecord> implements Record5<UUID, OffsetDateTime, Boolean, Boolean, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>REGULAR_INCOME.backup_history.id</code>.
     */
    public BackupHistoryRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.backup_history.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>REGULAR_INCOME.backup_history.last_check</code>.
     */
    public BackupHistoryRecord setLastCheck(OffsetDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.backup_history.last_check</code>.
     */
    public OffsetDateTime getLastCheck() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>REGULAR_INCOME.backup_history.had_work_to_do</code>.
     */
    public BackupHistoryRecord setHadWorkToDo(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.backup_history.had_work_to_do</code>.
     */
    public Boolean getHadWorkToDo() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>REGULAR_INCOME.backup_history.success</code>.
     */
    public BackupHistoryRecord setSuccess(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.backup_history.success</code>.
     */
    public Boolean getSuccess() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>REGULAR_INCOME.backup_history.error_details</code>.
     */
    public BackupHistoryRecord setErrorDetails(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.backup_history.error_details</code>.
     */
    public String getErrorDetails() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, OffsetDateTime, Boolean, Boolean, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, OffsetDateTime, Boolean, Boolean, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return BackupHistory.BACKUP_HISTORY.ID;
    }

    @Override
    public Field<OffsetDateTime> field2() {
        return BackupHistory.BACKUP_HISTORY.LAST_CHECK;
    }

    @Override
    public Field<Boolean> field3() {
        return BackupHistory.BACKUP_HISTORY.HAD_WORK_TO_DO;
    }

    @Override
    public Field<Boolean> field4() {
        return BackupHistory.BACKUP_HISTORY.SUCCESS;
    }

    @Override
    public Field<String> field5() {
        return BackupHistory.BACKUP_HISTORY.ERROR_DETAILS;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public OffsetDateTime component2() {
        return getLastCheck();
    }

    @Override
    public Boolean component3() {
        return getHadWorkToDo();
    }

    @Override
    public Boolean component4() {
        return getSuccess();
    }

    @Override
    public String component5() {
        return getErrorDetails();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public OffsetDateTime value2() {
        return getLastCheck();
    }

    @Override
    public Boolean value3() {
        return getHadWorkToDo();
    }

    @Override
    public Boolean value4() {
        return getSuccess();
    }

    @Override
    public String value5() {
        return getErrorDetails();
    }

    @Override
    public BackupHistoryRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public BackupHistoryRecord value2(OffsetDateTime value) {
        setLastCheck(value);
        return this;
    }

    @Override
    public BackupHistoryRecord value3(Boolean value) {
        setHadWorkToDo(value);
        return this;
    }

    @Override
    public BackupHistoryRecord value4(Boolean value) {
        setSuccess(value);
        return this;
    }

    @Override
    public BackupHistoryRecord value5(String value) {
        setErrorDetails(value);
        return this;
    }

    @Override
    public BackupHistoryRecord values(UUID value1, OffsetDateTime value2, Boolean value3, Boolean value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BackupHistoryRecord
     */
    public BackupHistoryRecord() {
        super(BackupHistory.BACKUP_HISTORY);
    }

    /**
     * Create a detached, initialised BackupHistoryRecord
     */
    public BackupHistoryRecord(UUID id, OffsetDateTime lastCheck, Boolean hadWorkToDo, Boolean success, String errorDetails) {
        super(BackupHistory.BACKUP_HISTORY);

        setId(id);
        setLastCheck(lastCheck);
        setHadWorkToDo(hadWorkToDo);
        setSuccess(success);
        setErrorDetails(errorDetails);
    }
}
