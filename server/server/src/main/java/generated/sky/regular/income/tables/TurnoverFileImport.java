/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import generated.sky.regular.income.Keys;
import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.records.TurnoverFileImportRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TurnoverFileImport extends TableImpl<TurnoverFileImportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>REGULAR_INCOME.turnover_file_import</code>
     */
    public static final TurnoverFileImport TURNOVER_FILE_IMPORT = new TurnoverFileImport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TurnoverFileImportRecord> getRecordType() {
        return TurnoverFileImportRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.turnover_file_import.id</code>.
     */
    public final TableField<TurnoverFileImportRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_file_import.imported_at</code>.
     */
    public final TableField<TurnoverFileImportRecord, OffsetDateTime> IMPORTED_AT = createField(DSL.name("imported_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_file_import.filename</code>.
     */
    public final TableField<TurnoverFileImportRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_file_import.file_size</code>.
     */
    public final TableField<TurnoverFileImportRecord, Long> FILE_SIZE = createField(DSL.name("file_size"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.turnover_file_import.file_content_type</code>.
     */
    public final TableField<TurnoverFileImportRecord, String> FILE_CONTENT_TYPE = createField(DSL.name("file_content_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_file_import.file_content</code>.
     */
    public final TableField<TurnoverFileImportRecord, byte[]> FILE_CONTENT = createField(DSL.name("file_content"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_file_import.checksum</code>.
     */
    public final TableField<TurnoverFileImportRecord, String> CHECKSUM = createField(DSL.name("checksum"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.turnover_file_import.turnover_file_format</code>.
     */
    public final TableField<TurnoverFileImportRecord, String> TURNOVER_FILE_FORMAT = createField(DSL.name("turnover_file_format"), SQLDataType.CLOB.nullable(false), this, "");

    private TurnoverFileImport(Name alias, Table<TurnoverFileImportRecord> aliased) {
        this(alias, aliased, null);
    }

    private TurnoverFileImport(Name alias, Table<TurnoverFileImportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.turnover_file_import</code> table
     * reference
     */
    public TurnoverFileImport(String alias) {
        this(DSL.name(alias), TURNOVER_FILE_IMPORT);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.turnover_file_import</code> table
     * reference
     */
    public TurnoverFileImport(Name alias) {
        this(alias, TURNOVER_FILE_IMPORT);
    }

    /**
     * Create a <code>REGULAR_INCOME.turnover_file_import</code> table reference
     */
    public TurnoverFileImport() {
        this(DSL.name("turnover_file_import"), null);
    }

    public <O extends Record> TurnoverFileImport(Table<O> child, ForeignKey<O, TurnoverFileImportRecord> key) {
        super(child, key, TURNOVER_FILE_IMPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RegularIncome.REGULAR_INCOME;
    }

    @Override
    public UniqueKey<TurnoverFileImportRecord> getPrimaryKey() {
        return Keys.TURNOVER_FILE_IMPORT_PKEY;
    }

    @Override
    public List<Check<TurnoverFileImportRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("turnover_file_import_turnover_file_format_check"), "((turnover_file_format = 'VR_BANK_CSV'::text))", true)
        );
    }

    @Override
    public TurnoverFileImport as(String alias) {
        return new TurnoverFileImport(DSL.name(alias), this);
    }

    @Override
    public TurnoverFileImport as(Name alias) {
        return new TurnoverFileImport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TurnoverFileImport rename(String name) {
        return new TurnoverFileImport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TurnoverFileImport rename(Name name) {
        return new TurnoverFileImport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, OffsetDateTime, String, Long, String, byte[], String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
