/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables.records;


import generated.sky.regular.income.tables.BankStatement;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankStatementRecord extends UpdatableRecordImpl<BankStatementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>REGULAR_INCOME.bank_statement.id</code>.
     */
    public BankStatementRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.bank_statement.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>REGULAR_INCOME.bank_statement.date_record</code>.
     */
    public BankStatementRecord setDateRecord(LocalDate value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.bank_statement.date_record</code>.
     */
    public LocalDate getDateRecord() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for
     * <code>REGULAR_INCOME.bank_statement.amount_balance_cents</code>.
     */
    public BankStatementRecord setAmountBalanceCents(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>REGULAR_INCOME.bank_statement.amount_balance_cents</code>.
     */
    public Integer getAmountBalanceCents() {
        return (Integer) get(2);
    }

    /**
     * Setter for
     * <code>REGULAR_INCOME.bank_statement.previous_statement_id</code>.
     */
    public BankStatementRecord setPreviousStatementId(UUID value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>REGULAR_INCOME.bank_statement.previous_statement_id</code>.
     */
    public UUID getPreviousStatementId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>REGULAR_INCOME.bank_statement.created_at</code>.
     */
    public BankStatementRecord setCreatedAt(OffsetDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.bank_statement.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>REGULAR_INCOME.bank_statement.updated_at</code>.
     */
    public BankStatementRecord setUpdatedAt(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.bank_statement.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>REGULAR_INCOME.bank_statement.owner_id</code>.
     */
    public BankStatementRecord setOwnerId(UUID value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.bank_statement.owner_id</code>.
     */
    public UUID getOwnerId() {
        return (UUID) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BankStatementRecord
     */
    public BankStatementRecord() {
        super(BankStatement.BANK_STATEMENT);
    }

    /**
     * Create a detached, initialised BankStatementRecord
     */
    public BankStatementRecord(UUID id, LocalDate dateRecord, Integer amountBalanceCents, UUID previousStatementId, OffsetDateTime createdAt, OffsetDateTime updatedAt, UUID ownerId) {
        super(BankStatement.BANK_STATEMENT);

        setId(id);
        setDateRecord(dateRecord);
        setAmountBalanceCents(amountBalanceCents);
        setPreviousStatementId(previousStatementId);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setOwnerId(ownerId);
        resetChangedOnNotNull();
    }
}
