/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import generated.sky.regular.income.Keys;
import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.records.BankStatementRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankStatement extends TableImpl<BankStatementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>REGULAR_INCOME.bank_statement</code>
     */
    public static final BankStatement BANK_STATEMENT = new BankStatement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankStatementRecord> getRecordType() {
        return BankStatementRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.bank_statement.id</code>.
     */
    public final TableField<BankStatementRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.bank_statement.date_record</code>.
     */
    public final TableField<BankStatementRecord, LocalDate> DATE_RECORD = createField(DSL.name("date_record"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.bank_statement.amount_balance_cents</code>.
     */
    public final TableField<BankStatementRecord, Integer> AMOUNT_BALANCE_CENTS = createField(DSL.name("amount_balance_cents"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.bank_statement.previous_statement_id</code>.
     */
    public final TableField<BankStatementRecord, UUID> PREVIOUS_STATEMENT_ID = createField(DSL.name("previous_statement_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>REGULAR_INCOME.bank_statement.created_at</code>.
     */
    public final TableField<BankStatementRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>REGULAR_INCOME.bank_statement.updated_at</code>.
     */
    public final TableField<BankStatementRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private BankStatement(Name alias, Table<BankStatementRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankStatement(Name alias, Table<BankStatementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.bank_statement</code> table
     * reference
     */
    public BankStatement(String alias) {
        this(DSL.name(alias), BANK_STATEMENT);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.bank_statement</code> table
     * reference
     */
    public BankStatement(Name alias) {
        this(alias, BANK_STATEMENT);
    }

    /**
     * Create a <code>REGULAR_INCOME.bank_statement</code> table reference
     */
    public BankStatement() {
        this(DSL.name("bank_statement"), null);
    }

    public <O extends Record> BankStatement(Table<O> child, ForeignKey<O, BankStatementRecord> key) {
        super(child, key, BANK_STATEMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RegularIncome.REGULAR_INCOME;
    }

    @Override
    public UniqueKey<BankStatementRecord> getPrimaryKey() {
        return Keys.BANK_STATEMENT_PKEY;
    }

    @Override
    public List<UniqueKey<BankStatementRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BANK_STATEMENT_PREVIOUS_STATEMENT_ID_KEY);
    }

    @Override
    public List<ForeignKey<BankStatementRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BANK_STATEMENT__BANK_STATEMENT_PREVIOUS_STATEMENT_ID_FKEY);
    }

    private transient BankStatement _bankStatement;

    /**
     * Get the implicit join path to the <code>public.bank_statement</code>
     * table.
     */
    public BankStatement bankStatement() {
        if (_bankStatement == null)
            _bankStatement = new BankStatement(this, Keys.BANK_STATEMENT__BANK_STATEMENT_PREVIOUS_STATEMENT_ID_FKEY);

        return _bankStatement;
    }

    @Override
    public BankStatement as(String alias) {
        return new BankStatement(DSL.name(alias), this);
    }

    @Override
    public BankStatement as(Name alias) {
        return new BankStatement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankStatement rename(String name) {
        return new BankStatement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankStatement rename(Name name) {
        return new BankStatement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, LocalDate, Integer, UUID, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
