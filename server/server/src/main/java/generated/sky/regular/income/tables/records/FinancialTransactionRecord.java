/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables.records;


import generated.sky.regular.income.tables.FinancialTransaction;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FinancialTransactionRecord extends UpdatableRecordImpl<FinancialTransactionRecord> implements Record9<UUID, UUID, LocalDate, Integer, Boolean, String, String, OffsetDateTime, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>REGULAR_INCOME.financial_transaction.id</code>.
     */
    public FinancialTransactionRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.financial_transaction.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for
     * <code>REGULAR_INCOME.financial_transaction.bank_statement_id</code>.
     */
    public FinancialTransactionRecord setBankStatementId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>REGULAR_INCOME.financial_transaction.bank_statement_id</code>.
     */
    public UUID getBankStatementId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>REGULAR_INCOME.financial_transaction.date_record</code>.
     */
    public FinancialTransactionRecord setDateRecord(LocalDate value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.financial_transaction.date_record</code>.
     */
    public LocalDate getDateRecord() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for
     * <code>REGULAR_INCOME.financial_transaction.amount_value_cents</code>.
     */
    public FinancialTransactionRecord setAmountValueCents(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>REGULAR_INCOME.financial_transaction.amount_value_cents</code>.
     */
    public Integer getAmountValueCents() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>REGULAR_INCOME.financial_transaction.is_periodic</code>.
     */
    public FinancialTransactionRecord setIsPeriodic(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.financial_transaction.is_periodic</code>.
     */
    public Boolean getIsPeriodic() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>REGULAR_INCOME.financial_transaction.reason</code>.
     */
    public FinancialTransactionRecord setReason(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.financial_transaction.reason</code>.
     */
    public String getReason() {
        return (String) get(5);
    }

    /**
     * Setter for <code>REGULAR_INCOME.financial_transaction.checksum</code>.
     */
    public FinancialTransactionRecord setChecksum(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.financial_transaction.checksum</code>.
     */
    public String getChecksum() {
        return (String) get(6);
    }

    /**
     * Setter for <code>REGULAR_INCOME.financial_transaction.created_at</code>.
     */
    public FinancialTransactionRecord setCreatedAt(OffsetDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.financial_transaction.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for <code>REGULAR_INCOME.financial_transaction.category_id</code>.
     */
    public FinancialTransactionRecord setCategoryId(UUID value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.financial_transaction.category_id</code>.
     */
    public UUID getCategoryId() {
        return (UUID) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, UUID, LocalDate, Integer, Boolean, String, String, OffsetDateTime, UUID> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<UUID, UUID, LocalDate, Integer, Boolean, String, String, OffsetDateTime, UUID> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return FinancialTransaction.FINANCIAL_TRANSACTION.ID;
    }

    @Override
    public Field<UUID> field2() {
        return FinancialTransaction.FINANCIAL_TRANSACTION.BANK_STATEMENT_ID;
    }

    @Override
    public Field<LocalDate> field3() {
        return FinancialTransaction.FINANCIAL_TRANSACTION.DATE_RECORD;
    }

    @Override
    public Field<Integer> field4() {
        return FinancialTransaction.FINANCIAL_TRANSACTION.AMOUNT_VALUE_CENTS;
    }

    @Override
    public Field<Boolean> field5() {
        return FinancialTransaction.FINANCIAL_TRANSACTION.IS_PERIODIC;
    }

    @Override
    public Field<String> field6() {
        return FinancialTransaction.FINANCIAL_TRANSACTION.REASON;
    }

    @Override
    public Field<String> field7() {
        return FinancialTransaction.FINANCIAL_TRANSACTION.CHECKSUM;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return FinancialTransaction.FINANCIAL_TRANSACTION.CREATED_AT;
    }

    @Override
    public Field<UUID> field9() {
        return FinancialTransaction.FINANCIAL_TRANSACTION.CATEGORY_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getBankStatementId();
    }

    @Override
    public LocalDate component3() {
        return getDateRecord();
    }

    @Override
    public Integer component4() {
        return getAmountValueCents();
    }

    @Override
    public Boolean component5() {
        return getIsPeriodic();
    }

    @Override
    public String component6() {
        return getReason();
    }

    @Override
    public String component7() {
        return getChecksum();
    }

    @Override
    public OffsetDateTime component8() {
        return getCreatedAt();
    }

    @Override
    public UUID component9() {
        return getCategoryId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getBankStatementId();
    }

    @Override
    public LocalDate value3() {
        return getDateRecord();
    }

    @Override
    public Integer value4() {
        return getAmountValueCents();
    }

    @Override
    public Boolean value5() {
        return getIsPeriodic();
    }

    @Override
    public String value6() {
        return getReason();
    }

    @Override
    public String value7() {
        return getChecksum();
    }

    @Override
    public OffsetDateTime value8() {
        return getCreatedAt();
    }

    @Override
    public UUID value9() {
        return getCategoryId();
    }

    @Override
    public FinancialTransactionRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public FinancialTransactionRecord value2(UUID value) {
        setBankStatementId(value);
        return this;
    }

    @Override
    public FinancialTransactionRecord value3(LocalDate value) {
        setDateRecord(value);
        return this;
    }

    @Override
    public FinancialTransactionRecord value4(Integer value) {
        setAmountValueCents(value);
        return this;
    }

    @Override
    public FinancialTransactionRecord value5(Boolean value) {
        setIsPeriodic(value);
        return this;
    }

    @Override
    public FinancialTransactionRecord value6(String value) {
        setReason(value);
        return this;
    }

    @Override
    public FinancialTransactionRecord value7(String value) {
        setChecksum(value);
        return this;
    }

    @Override
    public FinancialTransactionRecord value8(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public FinancialTransactionRecord value9(UUID value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public FinancialTransactionRecord values(UUID value1, UUID value2, LocalDate value3, Integer value4, Boolean value5, String value6, String value7, OffsetDateTime value8, UUID value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FinancialTransactionRecord
     */
    public FinancialTransactionRecord() {
        super(FinancialTransaction.FINANCIAL_TRANSACTION);
    }

    /**
     * Create a detached, initialised FinancialTransactionRecord
     */
    public FinancialTransactionRecord(UUID id, UUID bankStatementId, LocalDate dateRecord, Integer amountValueCents, Boolean isPeriodic, String reason, String checksum, OffsetDateTime createdAt, UUID categoryId) {
        super(FinancialTransaction.FINANCIAL_TRANSACTION);

        setId(id);
        setBankStatementId(bankStatementId);
        setDateRecord(dateRecord);
        setAmountValueCents(amountValueCents);
        setIsPeriodic(isPeriodic);
        setReason(reason);
        setChecksum(checksum);
        setCreatedAt(createdAt);
        setCategoryId(categoryId);
    }
}
