/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.records.VCategoriesWithUsageCountRecord;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VCategoriesWithUsageCount extends TableImpl<VCategoriesWithUsageCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>REGULAR_INCOME.v_categories_with_usage_count</code>
     */
    public static final VCategoriesWithUsageCount V_CATEGORIES_WITH_USAGE_COUNT = new VCategoriesWithUsageCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VCategoriesWithUsageCountRecord> getRecordType() {
        return VCategoriesWithUsageCountRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.v_categories_with_usage_count.id</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.parent_category</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, UUID> PARENT_CATEGORY = createField(DSL.name("parent_category"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.name</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.is_income</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, Boolean> IS_INCOME = createField(DSL.name("is_income"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.description</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.last_updated_at</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, OffsetDateTime> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.created_at</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.use_count</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, Long> USE_COUNT = createField(DSL.name("use_count"), SQLDataType.BIGINT, this, "");

    private VCategoriesWithUsageCount(Name alias, Table<VCategoriesWithUsageCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private VCategoriesWithUsageCount(Name alias, Table<VCategoriesWithUsageCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"v_categories_with_usage_count\" as  WITH fin_transaction_count AS (\n         SELECT financial_transaction.category_id,\n            count(*) AS financial_transaction_count\n           FROM financial_transaction\n          GROUP BY financial_transaction.category_id\n        ), turnovers_count AS (\n         SELECT turnover_row.category_id,\n            count(*) AS turnover_count\n           FROM turnover_row\n          GROUP BY turnover_row.category_id\n        ), overall_count AS (\n         SELECT COALESCE(c.category_id, t.category_id) AS category_id,\n            (COALESCE(c.financial_transaction_count, (0)::bigint) + COALESCE(t.turnover_count, (0)::bigint)) AS use_count\n           FROM (fin_transaction_count c\n             FULL JOIN turnovers_count t ON ((c.category_id = t.category_id)))\n        ), completed_categories AS (\n         SELECT c.id,\n            c.parent_category,\n            c.name,\n            c.is_income,\n            c.description,\n            c.last_updated_at,\n            c.created_at,\n            COALESCE(o.use_count, (0)::bigint) AS use_count\n           FROM (category c\n             LEFT JOIN overall_count o ON ((c.id = o.category_id)))\n        )\n SELECT completed_categories.id,\n    completed_categories.parent_category,\n    completed_categories.name,\n    completed_categories.is_income,\n    completed_categories.description,\n    completed_categories.last_updated_at,\n    completed_categories.created_at,\n    completed_categories.use_count\n   FROM completed_categories;"));
    }

    /**
     * Create an aliased
     * <code>REGULAR_INCOME.v_categories_with_usage_count</code> table reference
     */
    public VCategoriesWithUsageCount(String alias) {
        this(DSL.name(alias), V_CATEGORIES_WITH_USAGE_COUNT);
    }

    /**
     * Create an aliased
     * <code>REGULAR_INCOME.v_categories_with_usage_count</code> table reference
     */
    public VCategoriesWithUsageCount(Name alias) {
        this(alias, V_CATEGORIES_WITH_USAGE_COUNT);
    }

    /**
     * Create a <code>REGULAR_INCOME.v_categories_with_usage_count</code> table
     * reference
     */
    public VCategoriesWithUsageCount() {
        this(DSL.name("v_categories_with_usage_count"), null);
    }

    public <O extends Record> VCategoriesWithUsageCount(Table<O> child, ForeignKey<O, VCategoriesWithUsageCountRecord> key) {
        super(child, key, V_CATEGORIES_WITH_USAGE_COUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RegularIncome.REGULAR_INCOME;
    }

    @Override
    public VCategoriesWithUsageCount as(String alias) {
        return new VCategoriesWithUsageCount(DSL.name(alias), this);
    }

    @Override
    public VCategoriesWithUsageCount as(Name alias) {
        return new VCategoriesWithUsageCount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VCategoriesWithUsageCount rename(String name) {
        return new VCategoriesWithUsageCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VCategoriesWithUsageCount rename(Name name) {
        return new VCategoriesWithUsageCount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, String, Boolean, String, OffsetDateTime, OffsetDateTime, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
