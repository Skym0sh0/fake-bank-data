/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.records.VCategoriesWithUsageCountRecord;

import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VCategoriesWithUsageCount extends TableImpl<VCategoriesWithUsageCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>REGULAR_INCOME.v_categories_with_usage_count</code>
     */
    public static final VCategoriesWithUsageCount V_CATEGORIES_WITH_USAGE_COUNT = new VCategoriesWithUsageCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VCategoriesWithUsageCountRecord> getRecordType() {
        return VCategoriesWithUsageCountRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.v_categories_with_usage_count.id</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.parent_category</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, UUID> PARENT_CATEGORY = createField(DSL.name("parent_category"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.name</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.is_income</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, Boolean> IS_INCOME = createField(DSL.name("is_income"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.description</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.last_updated_at</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, OffsetDateTime> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.created_at</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.owner_id</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.v_categories_with_usage_count.use_count</code>.
     */
    public final TableField<VCategoriesWithUsageCountRecord, Long> USE_COUNT = createField(DSL.name("use_count"), SQLDataType.BIGINT, this, "");

    private VCategoriesWithUsageCount(Name alias, Table<VCategoriesWithUsageCountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VCategoriesWithUsageCount(Name alias, Table<VCategoriesWithUsageCountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "v_categories_with_usage_count" as  WITH fin_transaction_count AS (
                SELECT financial_transaction.category_id,
                   count(*) AS financial_transaction_count
                  FROM financial_transaction
                 GROUP BY financial_transaction.category_id
               ), turnovers_count AS (
                SELECT turnover_row.category_id,
                   count(*) AS turnover_count
                  FROM turnover_row
                 GROUP BY turnover_row.category_id
               ), overall_count AS (
                SELECT COALESCE(c.category_id, t.category_id) AS category_id,
                   (COALESCE(c.financial_transaction_count, (0)::bigint) + COALESCE(t.turnover_count, (0)::bigint)) AS use_count
                  FROM (fin_transaction_count c
                    FULL JOIN turnovers_count t ON ((c.category_id = t.category_id)))
               ), completed_categories AS (
                SELECT c.id,
                   c.parent_category,
                   c.name,
                   c.is_income,
                   c.description,
                   c.last_updated_at,
                   c.created_at,
                   c.owner_id,
                   COALESCE(o.use_count, (0)::bigint) AS use_count
                  FROM (category c
                    LEFT JOIN overall_count o ON ((c.id = o.category_id)))
               )
        SELECT id,
           parent_category,
           name,
           is_income,
           description,
           last_updated_at,
           created_at,
           owner_id,
           use_count
          FROM completed_categories;
        """), where);
    }

    /**
     * Create an aliased
     * <code>REGULAR_INCOME.v_categories_with_usage_count</code> table reference
     */
    public VCategoriesWithUsageCount(String alias) {
        this(DSL.name(alias), V_CATEGORIES_WITH_USAGE_COUNT);
    }

    /**
     * Create an aliased
     * <code>REGULAR_INCOME.v_categories_with_usage_count</code> table reference
     */
    public VCategoriesWithUsageCount(Name alias) {
        this(alias, V_CATEGORIES_WITH_USAGE_COUNT);
    }

    /**
     * Create a <code>REGULAR_INCOME.v_categories_with_usage_count</code> table
     * reference
     */
    public VCategoriesWithUsageCount() {
        this(DSL.name("v_categories_with_usage_count"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RegularIncome.REGULAR_INCOME;
    }

    @Override
    public VCategoriesWithUsageCount as(String alias) {
        return new VCategoriesWithUsageCount(DSL.name(alias), this);
    }

    @Override
    public VCategoriesWithUsageCount as(Name alias) {
        return new VCategoriesWithUsageCount(alias, this);
    }

    @Override
    public VCategoriesWithUsageCount as(Table<?> alias) {
        return new VCategoriesWithUsageCount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VCategoriesWithUsageCount rename(String name) {
        return new VCategoriesWithUsageCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VCategoriesWithUsageCount rename(Name name) {
        return new VCategoriesWithUsageCount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VCategoriesWithUsageCount rename(Table<?> name) {
        return new VCategoriesWithUsageCount(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VCategoriesWithUsageCount where(Condition condition) {
        return new VCategoriesWithUsageCount(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VCategoriesWithUsageCount where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VCategoriesWithUsageCount where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VCategoriesWithUsageCount where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VCategoriesWithUsageCount where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VCategoriesWithUsageCount where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VCategoriesWithUsageCount where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VCategoriesWithUsageCount where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VCategoriesWithUsageCount whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VCategoriesWithUsageCount whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
