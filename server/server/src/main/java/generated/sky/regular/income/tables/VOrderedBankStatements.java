/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import de.sky.common.database.converters.DateConverter;

import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.records.VOrderedBankStatementsRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VOrderedBankStatements extends TableImpl<VOrderedBankStatementsRecord> {

    private static final long serialVersionUID = -1112957186;

    /**
     * The reference instance of <code>REGULAR_INCOME.v_ordered_bank_statements</code>
     */
    public static final VOrderedBankStatements V_ORDERED_BANK_STATEMENTS = new VOrderedBankStatements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VOrderedBankStatementsRecord> getRecordType() {
        return VOrderedBankStatementsRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.v_ordered_bank_statements.id</code>.
     */
    public final TableField<VOrderedBankStatementsRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>REGULAR_INCOME.v_ordered_bank_statements.date_record</code>.
     */
    public final TableField<VOrderedBankStatementsRecord, LocalDate> DATE_RECORD = createField("date_record", org.jooq.impl.SQLDataType.DATE, this, "", new DateConverter());

    /**
     * The column <code>REGULAR_INCOME.v_ordered_bank_statements.amount_balance_cents</code>.
     */
    public final TableField<VOrderedBankStatementsRecord, Integer> AMOUNT_BALANCE_CENTS = createField("amount_balance_cents", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>REGULAR_INCOME.v_ordered_bank_statements.previous_statement_id</code>.
     */
    public final TableField<VOrderedBankStatementsRecord, UUID> PREVIOUS_STATEMENT_ID = createField("previous_statement_id", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>REGULAR_INCOME.v_ordered_bank_statements.created_at</code>.
     */
    public final TableField<VOrderedBankStatementsRecord, OffsetDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>REGULAR_INCOME.v_ordered_bank_statements.updated_at</code>.
     */
    public final TableField<VOrderedBankStatementsRecord, OffsetDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>REGULAR_INCOME.v_ordered_bank_statements.rank</code>.
     */
    public final TableField<VOrderedBankStatementsRecord, Integer> RANK = createField("rank", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>REGULAR_INCOME.v_ordered_bank_statements</code> table reference
     */
    public VOrderedBankStatements() {
        this(DSL.name("v_ordered_bank_statements"), null);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.v_ordered_bank_statements</code> table reference
     */
    public VOrderedBankStatements(String alias) {
        this(DSL.name(alias), V_ORDERED_BANK_STATEMENTS);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.v_ordered_bank_statements</code> table reference
     */
    public VOrderedBankStatements(Name alias) {
        this(alias, V_ORDERED_BANK_STATEMENTS);
    }

    private VOrderedBankStatements(Name alias, Table<VOrderedBankStatementsRecord> aliased) {
        this(alias, aliased, null);
    }

    private VOrderedBankStatements(Name alias, Table<VOrderedBankStatementsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> VOrderedBankStatements(Table<O> child, ForeignKey<O, VOrderedBankStatementsRecord> key) {
        super(child, key, V_ORDERED_BANK_STATEMENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return RegularIncome.REGULAR_INCOME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VOrderedBankStatements as(String alias) {
        return new VOrderedBankStatements(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VOrderedBankStatements as(Name alias) {
        return new VOrderedBankStatements(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VOrderedBankStatements rename(String name) {
        return new VOrderedBankStatements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VOrderedBankStatements rename(Name name) {
        return new VOrderedBankStatements(name, null);
    }
}
