/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables.records;


import generated.sky.regular.income.tables.VCategoriesWithUsageCount;

import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VCategoriesWithUsageCountRecord extends TableRecordImpl<VCategoriesWithUsageCountRecord> implements Record2<UUID, Long> {

    private static final long serialVersionUID = -570276361;

    /**
     * Setter for <code>REGULAR_INCOME.v_categories_with_usage_count.category_id</code>.
     */
    public VCategoriesWithUsageCountRecord setCategoryId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.v_categories_with_usage_count.category_id</code>.
     */
    public UUID getCategoryId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>REGULAR_INCOME.v_categories_with_usage_count.use_count</code>.
     */
    public VCategoriesWithUsageCountRecord setUseCount(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>REGULAR_INCOME.v_categories_with_usage_count.use_count</code>.
     */
    public Long getUseCount() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<UUID, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<UUID, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field1() {
        return VCategoriesWithUsageCount.V_CATEGORIES_WITH_USAGE_COUNT.CATEGORY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return VCategoriesWithUsageCount.V_CATEGORIES_WITH_USAGE_COUNT.USE_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID component1() {
        return getCategoryId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component2() {
        return getUseCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value1() {
        return getCategoryId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getUseCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VCategoriesWithUsageCountRecord value1(UUID value) {
        setCategoryId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VCategoriesWithUsageCountRecord value2(Long value) {
        setUseCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VCategoriesWithUsageCountRecord values(UUID value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached VCategoriesWithUsageCountRecord
     */
    public VCategoriesWithUsageCountRecord() {
        super(VCategoriesWithUsageCount.V_CATEGORIES_WITH_USAGE_COUNT);
    }

    /**
     * Create a detached, initialised VCategoriesWithUsageCountRecord
     */
    public VCategoriesWithUsageCountRecord(UUID categoryId, Long useCount) {
        super(VCategoriesWithUsageCount.V_CATEGORIES_WITH_USAGE_COUNT);

        set(0, categoryId);
        set(1, useCount);
    }
}
