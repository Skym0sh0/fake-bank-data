/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import de.sky.common.database.converters.DateConverter;

import generated.sky.regular.income.Indexes;
import generated.sky.regular.income.Keys;
import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.records.TurnoverRowRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TurnoverRow extends TableImpl<TurnoverRowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>REGULAR_INCOME.turnover_row</code>
     */
    public static final TurnoverRow TURNOVER_ROW = new TurnoverRow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TurnoverRowRecord> getRecordType() {
        return TurnoverRowRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.turnover_row.id</code>.
     */
    public final TableField<TurnoverRowRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.turnover_file</code>.
     */
    public final TableField<TurnoverRowRecord, UUID> TURNOVER_FILE = createField(DSL.name("turnover_file"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.date</code>.
     */
    public final TableField<TurnoverRowRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "", new DateConverter());

    /**
     * The column <code>REGULAR_INCOME.turnover_row.amount_value_cents</code>.
     */
    public final TableField<TurnoverRowRecord, Integer> AMOUNT_VALUE_CENTS = createField(DSL.name("amount_value_cents"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.description</code>.
     */
    public final TableField<TurnoverRowRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.suggested_category</code>.
     */
    public final TableField<TurnoverRowRecord, String> SUGGESTED_CATEGORY = createField(DSL.name("suggested_category"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.recipient</code>.
     */
    public final TableField<TurnoverRowRecord, String> RECIPIENT = createField(DSL.name("recipient"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.checksum</code>.
     */
    public final TableField<TurnoverRowRecord, String> CHECKSUM = createField(DSL.name("checksum"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.category_id</code>.
     */
    public final TableField<TurnoverRowRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.last_updated_at</code>.
     */
    public final TableField<TurnoverRowRecord, OffsetDateTime> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private TurnoverRow(Name alias, Table<TurnoverRowRecord> aliased) {
        this(alias, aliased, null);
    }

    private TurnoverRow(Name alias, Table<TurnoverRowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.turnover_row</code> table
     * reference
     */
    public TurnoverRow(String alias) {
        this(DSL.name(alias), TURNOVER_ROW);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.turnover_row</code> table
     * reference
     */
    public TurnoverRow(Name alias) {
        this(alias, TURNOVER_ROW);
    }

    /**
     * Create a <code>REGULAR_INCOME.turnover_row</code> table reference
     */
    public TurnoverRow() {
        this(DSL.name("turnover_row"), null);
    }

    public <O extends Record> TurnoverRow(Table<O> child, ForeignKey<O, TurnoverRowRecord> key) {
        super(child, key, TURNOVER_ROW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RegularIncome.REGULAR_INCOME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.UQ_TURNOVER_ROW_CHECKSUM);
    }

    @Override
    public UniqueKey<TurnoverRowRecord> getPrimaryKey() {
        return Keys.TURNOVER_ROW_PKEY;
    }

    @Override
    public List<UniqueKey<TurnoverRowRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TURNOVER_ROW_CHECKSUM_KEY);
    }

    @Override
    public List<ForeignKey<TurnoverRowRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TURNOVER_ROW__TURNOVER_ROW_TURNOVER_FILE_FKEY, Keys.TURNOVER_ROW__TURNOVER_ROW_CATEGORY_ID_FKEY);
    }

    private transient TurnoverFileImport _turnoverFileImport;
    private transient Category _category;

    /**
     * Get the implicit join path to the
     * <code>public.turnover_file_import</code> table.
     */
    public TurnoverFileImport turnoverFileImport() {
        if (_turnoverFileImport == null)
            _turnoverFileImport = new TurnoverFileImport(this, Keys.TURNOVER_ROW__TURNOVER_ROW_TURNOVER_FILE_FKEY);

        return _turnoverFileImport;
    }

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.TURNOVER_ROW__TURNOVER_ROW_CATEGORY_ID_FKEY);

        return _category;
    }

    @Override
    public List<Check<TurnoverRowRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("turnover_row_check"), "((id = checksum))", true)
        );
    }

    @Override
    public TurnoverRow as(String alias) {
        return new TurnoverRow(DSL.name(alias), this);
    }

    @Override
    public TurnoverRow as(Name alias) {
        return new TurnoverRow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TurnoverRow rename(String name) {
        return new TurnoverRow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TurnoverRow rename(Name name) {
        return new TurnoverRow(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, UUID, LocalDate, Integer, String, String, String, String, UUID, OffsetDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
