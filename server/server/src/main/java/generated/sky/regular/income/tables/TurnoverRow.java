/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import generated.sky.regular.income.Indexes;
import generated.sky.regular.income.Keys;
import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.Category.CategoryPath;
import generated.sky.regular.income.tables.TurnoverFileImport.TurnoverFileImportPath;
import generated.sky.regular.income.tables.Users.UsersPath;
import generated.sky.regular.income.tables.records.TurnoverRowRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TurnoverRow extends TableImpl<TurnoverRowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>REGULAR_INCOME.turnover_row</code>
     */
    public static final TurnoverRow TURNOVER_ROW = new TurnoverRow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TurnoverRowRecord> getRecordType() {
        return TurnoverRowRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.turnover_row.turnover_file</code>.
     */
    public final TableField<TurnoverRowRecord, UUID> TURNOVER_FILE = createField(DSL.name("turnover_file"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.date</code>.
     */
    public final TableField<TurnoverRowRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.amount_value_cents</code>.
     */
    public final TableField<TurnoverRowRecord, Integer> AMOUNT_VALUE_CENTS = createField(DSL.name("amount_value_cents"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.description</code>.
     */
    public final TableField<TurnoverRowRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.suggested_category</code>.
     */
    public final TableField<TurnoverRowRecord, String> SUGGESTED_CATEGORY = createField(DSL.name("suggested_category"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.recipient</code>.
     */
    public final TableField<TurnoverRowRecord, String> RECIPIENT = createField(DSL.name("recipient"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.checksum</code>.
     */
    public final TableField<TurnoverRowRecord, String> CHECKSUM = createField(DSL.name("checksum"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.category_id</code>.
     */
    public final TableField<TurnoverRowRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.last_updated_at</code>.
     */
    public final TableField<TurnoverRowRecord, OffsetDateTime> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.owner_id</code>.
     */
    public final TableField<TurnoverRowRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.turnover_row.id</code>.
     */
    public final TableField<TurnoverRowRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    private TurnoverRow(Name alias, Table<TurnoverRowRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TurnoverRow(Name alias, Table<TurnoverRowRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.turnover_row</code> table
     * reference
     */
    public TurnoverRow(String alias) {
        this(DSL.name(alias), TURNOVER_ROW);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.turnover_row</code> table
     * reference
     */
    public TurnoverRow(Name alias) {
        this(alias, TURNOVER_ROW);
    }

    /**
     * Create a <code>REGULAR_INCOME.turnover_row</code> table reference
     */
    public TurnoverRow() {
        this(DSL.name("turnover_row"), null);
    }

    public <O extends Record> TurnoverRow(Table<O> path, ForeignKey<O, TurnoverRowRecord> childPath, InverseForeignKey<O, TurnoverRowRecord> parentPath) {
        super(path, childPath, parentPath, TURNOVER_ROW);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TurnoverRowPath extends TurnoverRow implements Path<TurnoverRowRecord> {
        public <O extends Record> TurnoverRowPath(Table<O> path, ForeignKey<O, TurnoverRowRecord> childPath, InverseForeignKey<O, TurnoverRowRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TurnoverRowPath(Name alias, Table<TurnoverRowRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TurnoverRowPath as(String alias) {
            return new TurnoverRowPath(DSL.name(alias), this);
        }

        @Override
        public TurnoverRowPath as(Name alias) {
            return new TurnoverRowPath(alias, this);
        }

        @Override
        public TurnoverRowPath as(Table<?> alias) {
            return new TurnoverRowPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RegularIncome.REGULAR_INCOME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TURNOVER_ROW_OWNER, Indexes.UQ_TURNOVER_ROW_CHECKSUM);
    }

    @Override
    public UniqueKey<TurnoverRowRecord> getPrimaryKey() {
        return Keys.TURNOVER_ROW_PKEY;
    }

    @Override
    public List<UniqueKey<TurnoverRowRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_TURNOVER_ROW_ID);
    }

    @Override
    public List<ForeignKey<TurnoverRowRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TURNOVER_ROW__FK_TURNOVER_ROW_FILE_FKEY, Keys.TURNOVER_ROW__FK_TURNOVER_ROW_CATEGORY_FKEY, Keys.TURNOVER_ROW__FK_TURNOVER_ROW_OWNER);
    }

    private transient TurnoverFileImportPath _turnoverFileImport;

    /**
     * Get the implicit join path to the
     * <code>public.turnover_file_import</code> table.
     */
    public TurnoverFileImportPath turnoverFileImport() {
        if (_turnoverFileImport == null)
            _turnoverFileImport = new TurnoverFileImportPath(this, Keys.TURNOVER_ROW__FK_TURNOVER_ROW_FILE_FKEY, null);

        return _turnoverFileImport;
    }

    private transient CategoryPath _category;

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    public CategoryPath category() {
        if (_category == null)
            _category = new CategoryPath(this, Keys.TURNOVER_ROW__FK_TURNOVER_ROW_CATEGORY_FKEY, null);

        return _category;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.TURNOVER_ROW__FK_TURNOVER_ROW_OWNER, null);

        return _users;
    }

    @Override
    public List<Check<TurnoverRowRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("c_amount_not_zero"), "((amount_value_cents <> 0))", true)
        );
    }

    @Override
    public TurnoverRow as(String alias) {
        return new TurnoverRow(DSL.name(alias), this);
    }

    @Override
    public TurnoverRow as(Name alias) {
        return new TurnoverRow(alias, this);
    }

    @Override
    public TurnoverRow as(Table<?> alias) {
        return new TurnoverRow(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TurnoverRow rename(String name) {
        return new TurnoverRow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TurnoverRow rename(Name name) {
        return new TurnoverRow(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TurnoverRow rename(Table<?> name) {
        return new TurnoverRow(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TurnoverRow where(Condition condition) {
        return new TurnoverRow(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TurnoverRow where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TurnoverRow where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TurnoverRow where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TurnoverRow where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TurnoverRow where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TurnoverRow where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TurnoverRow where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TurnoverRow whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TurnoverRow whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
