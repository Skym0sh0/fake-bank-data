/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import generated.sky.regular.income.Indexes;
import generated.sky.regular.income.Keys;
import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.records.BackupHistoryRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BackupHistory extends TableImpl<BackupHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>REGULAR_INCOME.backup_history</code>
     */
    public static final BackupHistory BACKUP_HISTORY = new BackupHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BackupHistoryRecord> getRecordType() {
        return BackupHistoryRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.backup_history.id</code>.
     */
    public final TableField<BackupHistoryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.backup_history.last_check</code>.
     */
    public final TableField<BackupHistoryRecord, OffsetDateTime> LAST_CHECK = createField(DSL.name("last_check"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.backup_history.had_work_to_do</code>.
     */
    public final TableField<BackupHistoryRecord, Boolean> HAD_WORK_TO_DO = createField(DSL.name("had_work_to_do"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.backup_history.success</code>.
     */
    public final TableField<BackupHistoryRecord, Boolean> SUCCESS = createField(DSL.name("success"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.backup_history.error_details</code>.
     */
    public final TableField<BackupHistoryRecord, String> ERROR_DETAILS = createField(DSL.name("error_details"), SQLDataType.CLOB, this, "");

    private BackupHistory(Name alias, Table<BackupHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private BackupHistory(Name alias, Table<BackupHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.backup_history</code> table
     * reference
     */
    public BackupHistory(String alias) {
        this(DSL.name(alias), BACKUP_HISTORY);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.backup_history</code> table
     * reference
     */
    public BackupHistory(Name alias) {
        this(alias, BACKUP_HISTORY);
    }

    /**
     * Create a <code>REGULAR_INCOME.backup_history</code> table reference
     */
    public BackupHistory() {
        this(DSL.name("backup_history"), null);
    }

    public <O extends Record> BackupHistory(Table<O> child, ForeignKey<O, BackupHistoryRecord> key) {
        super(child, key, BACKUP_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RegularIncome.REGULAR_INCOME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_BACKUP_LAST_CHECK);
    }

    @Override
    public UniqueKey<BackupHistoryRecord> getPrimaryKey() {
        return Keys.BACKUP_HISTORY_PKEY;
    }

    @Override
    public List<Check<BackupHistoryRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("co_error_details_if_error"), "(((success AND (error_details IS NULL)) OR ((NOT success) AND (error_details IS NOT NULL))))", true)
        );
    }

    @Override
    public BackupHistory as(String alias) {
        return new BackupHistory(DSL.name(alias), this);
    }

    @Override
    public BackupHistory as(Name alias) {
        return new BackupHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BackupHistory rename(String name) {
        return new BackupHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BackupHistory rename(Name name) {
        return new BackupHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, OffsetDateTime, Boolean, Boolean, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
