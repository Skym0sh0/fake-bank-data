/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import generated.sky.regular.income.Indexes;
import generated.sky.regular.income.Keys;
import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.records.BackupHistoryRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BackupHistory extends TableImpl<BackupHistoryRecord> {

    private static final long serialVersionUID = -707353730;

    /**
     * The reference instance of <code>REGULAR_INCOME.backup_history</code>
     */
    public static final BackupHistory BACKUP_HISTORY = new BackupHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BackupHistoryRecord> getRecordType() {
        return BackupHistoryRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.backup_history.id</code>.
     */
    public final TableField<BackupHistoryRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.backup_history.last_check</code>.
     */
    public final TableField<BackupHistoryRecord, OffsetDateTime> LAST_CHECK = createField("last_check", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.backup_history.had_work_to_do</code>.
     */
    public final TableField<BackupHistoryRecord, Boolean> HAD_WORK_TO_DO = createField("had_work_to_do", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>REGULAR_INCOME.backup_history</code> table reference
     */
    public BackupHistory() {
        this(DSL.name("backup_history"), null);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.backup_history</code> table reference
     */
    public BackupHistory(String alias) {
        this(DSL.name(alias), BACKUP_HISTORY);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.backup_history</code> table reference
     */
    public BackupHistory(Name alias) {
        this(alias, BACKUP_HISTORY);
    }

    private BackupHistory(Name alias, Table<BackupHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private BackupHistory(Name alias, Table<BackupHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BackupHistory(Table<O> child, ForeignKey<O, BackupHistoryRecord> key) {
        super(child, key, BACKUP_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return RegularIncome.REGULAR_INCOME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BACKUP_HISTORY_PKEY, Indexes.IDX_BACKUP_LAST_CHECK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BackupHistoryRecord> getPrimaryKey() {
        return Keys.BACKUP_HISTORY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BackupHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<BackupHistoryRecord>>asList(Keys.BACKUP_HISTORY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BackupHistory as(String alias) {
        return new BackupHistory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BackupHistory as(Name alias) {
        return new BackupHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BackupHistory rename(String name) {
        return new BackupHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BackupHistory rename(Name name) {
        return new BackupHistory(name, null);
    }
}
