import org.flywaydb.core.Flyway
import org.flywaydb.core.api.Location
import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*
import org.testcontainers.containers.PostgreSQLContainer
import org.testcontainers.utility.DockerImageName

import java.time.Duration
import java.time.LocalTime

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath("org.postgresql:postgresql:42.7.4")
        classpath("org.testcontainers:postgresql:1.20.1")
        classpath("org.jooq:jooq-codegen:3.19.13")
        classpath("org.flywaydb:flyway-core:10.19.0")
        classpath("org.flywaydb:flyway-database-postgresql:10.19.0")
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version "$springboot_version"
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.4.3'
    id "org.openapi.generator" version "7.8.0"
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
}

group 'de.sky.regular.income.server'
version '1.0-SNAPSHOT'

ext['jooq.version'] = "$jooq_version"
ext['flyway.version'] = "$flyway_version"

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "$slf4j_version"
//    implementation group: 'ch.qos.logback', name: 'logback-core', version: "$logback_version"
//    implementation group: 'ch.qos.logback', name: 'logback-classic', version: "$logback_version"

    implementation group: 'org.springframework.boot', name: 'spring-boot-dependencies', version: "$springboot_version"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "$springboot_version"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: "$springboot_version"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: "$springboot_version"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: "$springboot_version"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: "$springboot_version"
    compileOnly group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: "$springboot_version"
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: "$springboot_version"

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "$springboot_version"

    implementation group: "org.jooq", name: "jooq", version: jooq_version
    implementation group: "org.flywaydb", name: "flyway-core", version: flyway_version
    implementation group: "org.flywaydb", name: "flyway-database-postgresql", version: flyway_version
    implementation group: "com.zaxxer", name: "HikariCP", version: "6.0.0"
    runtimeOnly group: "org.postgresql", name: "postgresql", version: "42.7.4"

    implementation("io.swagger.core.v3:swagger-models:2.2.25")
    implementation("io.swagger.core.v3:swagger-annotations:2.2.23")

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'
    implementation group: 'com.google.guava', name: 'guava', version: '33.3.1-jre'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: "$junit_version"
//    testRuntime group: 'org.junit.vintage', name: 'junit-vintage-engine', version: "$junit_version"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "$mockito_version"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "$assertj_version"

//    implementation group: 'org.apache.poi', name: 'poi', version: '5.2.5'
    implementation group: 'com.univocity', name: 'univocity-parsers', version: '2.9.1'
}


gitProperties {
    extProperty = "git.properties"
}

tasks.register("prepareGitProperties") {
    dependsOn("generateGitProperties")

    doFirst {
        def gitProps = project.ext["git.properties"]?.findAll { key, value ->
            key instanceof String && value instanceof String
        } ?: [:]

        gitProps.each { key, value ->
            project.ext.set(key, value)
        }
    }
}

tasks.named("compileJava") {
    dependsOn("prepareGitProperties")
}

tasks.register("jooqCodegen") {
    group = "build"

    inputs.files(layout.projectDirectory.dir("src/main/resources/db/migration"))
    outputs.dir(file(layout.buildDirectory.dir("generated/sources/jooq")))

    doLast {
        def container = new PostgreSQLContainer(DockerImageName.parse("postgres@sha256:d13ef786196545cd69aff1945929fc868712196e195bc66581fb1bfe81649eaf"))
        try {
            container.start()

            Flyway.configure()
                    .failOnMissingLocations(true)
                    .dataSource(container.jdbcUrl, container.username, container.password)
                    .locations("${Location.FILESYSTEM_PREFIX}${layout.projectDirectory.dir("src/main/resources/db/migration").asFile.path}")
                    .load()
                    .migrate()

            def config = new Configuration()
                    .withJdbc(
                            new Jdbc()
                                    .withDriver("org.postgresql.Driver")
                                    .withUrl(container.jdbcUrl)
                                    .withUser(container.username)
                                    .withPassword(container.password)
                    )
                    .withGenerator(
                            new Generator()
                                    .withDatabase(
                                            new Database()
                                                    .withInputSchema("public")
                                                    .withOutputSchema("regular_income")
                                                    .withExcludes(".*flyway.*")
                                    )
                                    .withGenerate(
                                            new Generate()
                                                    .withFluentSetters(true)
                                                    .withDeprecated(false)
                                                    .withRelations(true)
                                    )
                                    .withTarget(
                                            new Target()
                                                    .withPackageName("generated.sky.regular.income")
                                                    .withDirectory(layout.buildDirectory.dir("generated/sources/jooq").get().asFile.path)
                                                    .withEncoding("UTF-8")
                                                    .withClean(true)
                                    )
                    )

            new GenerationTool()
                    .run(config)
        }
        finally {
            container.stop();
        }
    }
}

compileJava.dependsOn("jooqCodegen")

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set(layout.projectDirectory.dir("..").dir("spec").file("openapi-spec.yml").asFile.path)
    outputDir.set(layout.buildDirectory.dir("generated/sources/spec").get().asFile.path)
    apiPackage.set("generated.sky.regular.income.api.rest")
    modelPackage.set("de.sky.regular.income.api")
    typeMappings.set([
            "time"    : "LocalTime",
            "duration": "Duration",
    ])
    importMappings.set([
            "LocalTime": LocalTime.class.name,
            "Duration" : Duration.class.name
    ])
    configOptions.set([
            "library"                    : "spring-boot",
            "dateLibrary"                : "java8",
            "useJakartaEe"               : "true",
            "generateBuilders"           : "true",
            "legacyDiscriminatorBehavior": "false",
            "openApiNullable"            : "false",
            "delegatePattern"            : "false",
            "useSpringBoot3"             : "true",
            "interfaceOnly"              : "true",
            "skipDefaultInterface"       : "true",
            "returnSuccessCode"          : "true",
            "useTags"                    : "true"
    ])
}

tasks.named("compileJava") {
    dependsOn(tasks.openApiGenerate)
    dependsOn("prepareGitProperties")
}

sourceSets {
    main {
        java {
            srcDirs(
                    'database/src/main/java',
                    'build/generated/sources/jooq/generated',
                    'build/generated/sources/spec/src/main'
            )
        }
    }
}

test {
    useJUnitPlatform()
}

mainClassName = 'de.sky.regular.income.Server'

jib {
    from {
        // linux/arm/v7
        image = 'registry://eclipse-temurin:19-jre-jammy@sha256:167557501026d70f7486b631d26ae00f7551cc1daba1da67f86948ea5bd2aa41'
        //        // linux/amd64
//      image = 'registry://eclipse-temurin:19-jre-jammy@sha256:41a7ebdfa6b25e05986b77fbbc73820a3b7a6459a505686ba43e56baa83c0c98'
    }
    to {
        image = (System.getenv("DOCKER_REPOSITORY") ?: "default-docker-repository") + "/regular-income"
        tags = [System.getenv("RELEASE_VERSION") ?: 'latest', 'latest']
        auth {
            username = System.getenv("DOCKER_HUB_USERNAME") ?: "default-username"
            password = System.getenv("DOCKER_HUB_PASSWORD") ?: "default-password"
        }
    }
    container {
        creationTime.set(project.provider { project.ext["git.commit.time"] as String })
        mainClass = mainClassName
        ports = ['8080']
        labels.set(project.provider {
            [
                    "git.url"   : project.ext["git.remote.origin.url"] as String,
                    "git.time"  : project.ext["git.commit.time"] as String,
                    "git.commit": project.ext["git.commit.id"] as String,
                    "git.email" : project.ext["git.commit.user.email"] as String
            ]
        })
    }
}

tasks.register('copyWebApp', Copy) {
    dependsOn ':frontend:npmBuild'

    from "$rootDir/frontend/build/dist"
    into layout.buildDirectory.dir("resources/main/static/.")
}

processResources.dependsOn 'copyWebApp'
