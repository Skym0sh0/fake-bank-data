/*
 * This file is generated by jOOQ.
 */
package generated.sky.regular.income.tables;


import generated.sky.regular.income.Keys;
import generated.sky.regular.income.RegularIncome;
import generated.sky.regular.income.tables.Category.CategoryPath;
import generated.sky.regular.income.tables.Users.UsersPath;
import generated.sky.regular.income.tables.records.CategoryBudgetRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryBudget extends TableImpl<CategoryBudgetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>REGULAR_INCOME.category_budget</code>
     */
    public static final CategoryBudget CATEGORY_BUDGET = new CategoryBudget();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryBudgetRecord> getRecordType() {
        return CategoryBudgetRecord.class;
    }

    /**
     * The column <code>REGULAR_INCOME.category_budget.owner_id</code>.
     */
    public final TableField<CategoryBudgetRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.category_budget.category_id</code>.
     */
    public final TableField<CategoryBudgetRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>REGULAR_INCOME.category_budget.id</code>.
     */
    public final TableField<CategoryBudgetRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.category_budget.monthly_budget_amount_value_cents</code>.
     */
    public final TableField<CategoryBudgetRecord, Integer> MONTHLY_BUDGET_AMOUNT_VALUE_CENTS = createField(DSL.name("monthly_budget_amount_value_cents"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>REGULAR_INCOME.category_budget.warning_threshold_fraction</code>.
     */
    public final TableField<CategoryBudgetRecord, BigDecimal> WARNING_THRESHOLD_FRACTION = createField(DSL.name("warning_threshold_fraction"), SQLDataType.NUMERIC.nullable(false), this, "");

    private CategoryBudget(Name alias, Table<CategoryBudgetRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CategoryBudget(Name alias, Table<CategoryBudgetRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.category_budget</code> table
     * reference
     */
    public CategoryBudget(String alias) {
        this(DSL.name(alias), CATEGORY_BUDGET);
    }

    /**
     * Create an aliased <code>REGULAR_INCOME.category_budget</code> table
     * reference
     */
    public CategoryBudget(Name alias) {
        this(alias, CATEGORY_BUDGET);
    }

    /**
     * Create a <code>REGULAR_INCOME.category_budget</code> table reference
     */
    public CategoryBudget() {
        this(DSL.name("category_budget"), null);
    }

    public <O extends Record> CategoryBudget(Table<O> path, ForeignKey<O, CategoryBudgetRecord> childPath, InverseForeignKey<O, CategoryBudgetRecord> parentPath) {
        super(path, childPath, parentPath, CATEGORY_BUDGET);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CategoryBudgetPath extends CategoryBudget implements Path<CategoryBudgetRecord> {
        public <O extends Record> CategoryBudgetPath(Table<O> path, ForeignKey<O, CategoryBudgetRecord> childPath, InverseForeignKey<O, CategoryBudgetRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CategoryBudgetPath(Name alias, Table<CategoryBudgetRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CategoryBudgetPath as(String alias) {
            return new CategoryBudgetPath(DSL.name(alias), this);
        }

        @Override
        public CategoryBudgetPath as(Name alias) {
            return new CategoryBudgetPath(alias, this);
        }

        @Override
        public CategoryBudgetPath as(Table<?> alias) {
            return new CategoryBudgetPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RegularIncome.REGULAR_INCOME;
    }

    @Override
    public UniqueKey<CategoryBudgetRecord> getPrimaryKey() {
        return Keys.CATEGORY_BUDGET_PKEY;
    }

    @Override
    public List<UniqueKey<CategoryBudgetRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CATEGORY_BUDGET_CATEGORY_ID_KEY, Keys.CATEGORY_BUDGET_ID_KEY);
    }

    @Override
    public List<ForeignKey<CategoryBudgetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CATEGORY_BUDGET__FK_CATEGORY_BUDGET_TO_CATEGORY, Keys.CATEGORY_BUDGET__FK_CATEGORY_BUDGET_TO_OWNER);
    }

    private transient CategoryPath _category;

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    public CategoryPath category() {
        if (_category == null)
            _category = new CategoryPath(this, Keys.CATEGORY_BUDGET__FK_CATEGORY_BUDGET_TO_CATEGORY, null);

        return _category;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.CATEGORY_BUDGET__FK_CATEGORY_BUDGET_TO_OWNER, null);

        return _users;
    }

    @Override
    public List<Check<CategoryBudgetRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("co_threshold_fraction_range"), "((((0)::numeric <= warning_threshold_fraction) AND (warning_threshold_fraction <= (1)::numeric)))", true)
        );
    }

    @Override
    public CategoryBudget as(String alias) {
        return new CategoryBudget(DSL.name(alias), this);
    }

    @Override
    public CategoryBudget as(Name alias) {
        return new CategoryBudget(alias, this);
    }

    @Override
    public CategoryBudget as(Table<?> alias) {
        return new CategoryBudget(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryBudget rename(String name) {
        return new CategoryBudget(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryBudget rename(Name name) {
        return new CategoryBudget(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryBudget rename(Table<?> name) {
        return new CategoryBudget(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryBudget where(Condition condition) {
        return new CategoryBudget(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryBudget where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryBudget where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryBudget where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryBudget where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryBudget where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryBudget where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryBudget where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryBudget whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryBudget whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
